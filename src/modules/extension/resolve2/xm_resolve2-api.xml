<declarations>
 <module>xm_resolve2</module>
 <include>../../../common/expr.h</include>
 <include>../../../common/module.h</include>

<!--
TODO:
  uid_to_name()
  user_get_gid()
  user_get_uid()
-->
 <function>
   <name>gid_to_name</name>
   <type>global</type>
   <cb>nx_expr_func__xm_resolve2_gid_to_name</cb>
   <rettype>string</rettype>
   <arg>
    <name>gid</name>
    <type>integer</type>
   </arg>
   <description>
     <en>
Return the group name assigned to the group ID. If gid cannot
be looked up, undef is returned.
     </en>
   </description>
 </function>

 <function>
   <name>gid_to_name</name>
   <type>global</type>
   <cb>nx_expr_func__xm_resolve2_gid_to_name</cb>
   <rettype>string</rettype>
   <arg>
    <name>gid</name>
    <type>string</type>
   </arg>
   <description>
     <en>
Return the group name assigned to the string gid on Unix. If
gid cannot be looked up, undef is returned.
     </en>
   </description>
 </function>

 <function>
   <name>group_get_gid</name>
   <type>global</type>
   <cb>nx_expr_func__xm_resolve2_group_get_gid</cb>
   <rettype>integer</rettype>
   <arg>
    <name>groupname</name>
    <type>string</type>
   </arg>
   <description>
     <en>
Return the group ID assigned to the group name.
     </en>
   </description>
 </function>

 <function>
   <name>ipaddr_to_name</name>
   <type>global</type>
   <cb>nx_expr_func__xm_resolve2_ipaddr_to_name</cb>
   <rettype>string</rettype>
   <arg>
    <name>ipaddr</name>
    <type>string</type>
   </arg>
   <description>
     <en>
Resolve and return the DNS name assigned to the IP address. The
ipaddr argument can be either a string or an ip4addr type.
     </en>
   </description>
 </function>

 <function>
   <name>name_to_ipaddr</name>
   <type>global</type>
   <cb>nx_expr_func__xm_resolve2_name_to_ipaddr</cb>
   <rettype>string</rettype>
   <arg>
    <name>name</name>
    <type>string</type>
   </arg>
   <description>
     <en>
Resolve and return the first IPv4 or IPv6 address assigned to name.
Here, xm_resolve2 differs from xm_resolver. Despite returing an
ip4addr xm_resolve2 returns a string. Casting to ip4addr/ip6addr
needs to be done in nxlog config language.
     </en>
   </description>
 </function>

</declarations>
